{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"cento","text":"Version Status Documentation Tools Compatibility Stats"},{"location":"#what-is-cento","title":"What is cento?","text":"<p>CENTO: \"A composition formed by joining scrapes from other authours.\" - Samuel Johnson's Dictionary of the English Language</p>"},{"location":"#why-use-cento","title":"Why use cento?","text":"<p><code>cento</code> allows a user to create a text, accompanying slides, and notes from a simple configuration file and markdown documents.</p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#requirements","title":"Requirements","text":"<p>To use <code>cento</code>, you need:</p> <ul> <li>A markdown editor (any text editor may suffice)</li> <li>Python 3.10 or later</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install <code>cento</code>, use <code>pip</code>:</p> <pre><code>pip install cento\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>First, you create a simple configuration file named \"project\" with a file extension matching one of the supported file configuration types. This should be stored in the same folder as your markdown files that will form the produced texts. Metadata goes in the first section titled \"Project.\" The \"Outline\" section contains the substructure of the intended documents (text, slides, and/or notes).</p> <pre><code>[Project]\nName: Crazy Idea\nStyle: book\nInclude: text, slides\nSlides Template: chalkboard\nOutput Folder: output\n\n[Outline]\nI: Introduction\nII: Literature Review\nIII: My Cool Idea\nA: Interesting Premise 1\n1: Underlying Facts\n2: Supporting Work\nB: Interesting Premise 2\nIV: Conclusion\n</code></pre> <p>The names of the files should correspond to the names of subsections in the Outline with spaces replaced with underscores. If the operating system you use has case-sensitive file names, all files should be named with lower case letters (and an extension of \".md\"). The above configuration file is from the <code>cento</code> tests folder. So, you can see how the markdown files are named inside the tests folder in the \"test_project_book\" subfolder.</p> <p>Second, write the content of your markdown files. The files may contain YAML front-matter for specific instructions and settings related to that file. All generally applicable instructions and settings should be in the project configuration file.</p> <p>By default, the sections of your markdown file should be named within \"&lt;\" and \"&gt;\":</p> divider usage \\&lt;text&gt; Contents of the book or article \\&lt;slides&gt; Contents of slides accompanying the book or article \\&lt;notes&gt; Contents of notes or accompanying guidebook <p>You do not have to have all of the section types. Any unmarked section will be assumed to be part of the book or article text.</p> <p>Any visualizations, images, charts, or graphs should be stored in a subfolder titled \"visuals\" by default.</p> <p>Third, you run <code>cento</code> from the command line. If you are in the folder where your configuration and markdown files are located, executing <code>cento</code> is simple:</p> <pre><code>python cento\n</code></pre> <p>If you are in a different folder, you just need to list that after <code>cento</code> as follows:</p> <pre><code>python cento {folder path}\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributors are always welcome. Feel free to grab an issue to work on or make a suggested improvement. If you wish to contribute, please read the Contribution Guide and Code of Conduct.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<ul> <li>quarto: an R based project for dynamically creating academic publications from markdown files.</li> </ul>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>I would like to thank the University of Kansas School of Law for tolerating and supporting this law professor's coding efforts, an endeavor which is well outside the typical scholarly activities in the discipline.</p>"},{"location":"#license","title":"License","text":"<p>Use of this repository is authorized under the Apache Software License 2.0.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#010","title":"0.1.0","text":"<pre><code>Initial Commit\n</code></pre>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting any of the following people:</p> <ul> <li>Corey Rayburn Yung (coreyrayburnyung@gmail.com)</li> </ul> <p>All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! Every little bit helps, and credit will always be given. Environment Setup</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Follow this basic process:</p> <ol> <li>Fork and clone the repositor.</li> <li>Create a new branch: <code>git checkout -b feature-or-bugfix-name</code>.</li> <li>Edit the code.</li> <li>If you added functionality or features, update the documentation accordingly.</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"contributing/#style-guidelines","title":"Style Guidelines","text":"<p>This package follows the Google Python Style Guide with two notable exceptions:</p> <ol> <li>It always adds spaces around \"=\". This not only violates the Google guide, it violates PEP8, the foundational Python style guide from which all other resources are derived. I defy this strong, long-standign norm because I find it more readable. My brain and eyes have trouble seeing two separate objects when an equal sign is in the middle. I imagine that I am not alone in this accessibility issue. Further, as PEP8 itself notes, required spaces around equal signs are becoming increasing common with type annotations becoming part of best practices (and, as a result, signatures to classes, functions, and methods regularly include spaces around the equal signs). I realize that this will seem alien to many coders, but it is far easier on my eyes.</li> <li>I use some so-called \"power features\", primarily dunder methods, to make my interfaces easier to access and use. This is disfavored in the Google Python Style Guide because such code is often more difficult for others to read. To address that concern, I try to document and comment as to what the code is doing whenever I used any of the \"power features\" of Python.</li> </ol>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build cento. Thank you!</p> <p><code>python</code> | <code>pdm</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>bespon</code> Python library for BespON <code>&gt;=0.7.0</code> <code>0.7.0</code> BSD License <code>click</code> Composable command line interface toolkit <code>&lt;9,&gt;=6</code> <code>8.1.7</code> BSD-3-Clause <code>codebraid</code> Live code in Pandoc Markdown <code>0.11.0</code> BSD License <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=3.1.0</code> <code>5.2.1</code> BSD-3-Clause <code>panflute</code> Pythonic Pandoc filters <code>2.3.1</code> BSD3 <code>pillow</code> Python Imaging Library (Fork) <code>&gt;=3.3.2</code> <code>10.3.0</code> HPND <code>pypandoc</code> Thin wrapper for pandoc. <code>1.14</code> MIT <code>python-docx</code> Create, read, and update Microsoft Word .docx files. <code>1.1.0</code> MIT <code>python-pptx</code> Generate and manipulate Open XML PowerPoint (.pptx) files <code>0.6.23</code> MIT <code>pyyaml</code> YAML parser and emitter for Python <code>&lt;7,&gt;=3</code> <code>6.0.1</code> MIT <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>4.11.0</code> Python Software Foundation License <code>wonka</code> Flexible, accessible, extensible Python factories <code>0.1.4</code> Apache Software License 2.0 <code>xlsxwriter</code> A Python module for creating Excel XLSX files. <code>&gt;=0.5.7</code> <code>3.2.0</code> BSD-2-Clause"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.14.0</code> BSD-3-Clause <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.2.2</code> MPL-2.0 <code>cfgv</code> Validate configuration and produce human readable error messages. <code>&gt;=2.0.0</code> <code>3.4.0</code> MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>&gt;= 7.2.7</code> <code>7.4.4</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>distlib</code> Distribution utilities <code>&lt;1,&gt;=0.3.7</code> <code>0.3.8</code> PSF-2.0 <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.2.0</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.1.1</code> MIT License <code>filelock</code> A platform independent file lock. <code>&lt;4,&gt;=3.12.2</code> <code>3.13.4</code> The Unlicense (Unlicense) <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.37</code> <code>0.42.1</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>identify</code> File identification library for Python <code>&gt;=1.0.0</code> <code>2.5.35</code> MIT <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.6</code> BSD License <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.3</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.6</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;= 0.3</code> <code>0.4.0</code> MIT License <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;= 1.6.0</code> <code>1.8.0</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>2.1.5</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;= 1.5.2</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;= 1.0.0</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;= 0.5.0</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;= 1.1.2</code> <code>2.3.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;= 0.6.0</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;= 9.1.2</code> <code>9.5.17</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;= 0.7.1</code> <code>0.8.0</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python] &gt;= 0.22.0</code> <code>0.24.3</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.9.2</code> ISC <code>nodeenv</code> Node.js virtual environment builder <code>&gt;=0.11.1</code> <code>1.8.0</code> BSD <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>24.0</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2.2.0</code> <code>4.2.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=1.4</code> <code>1.4.0</code> MIT <code>pre-commit</code> A framework for managing and maintaining multi-language pre-commit hooks. <code>&gt;= 3.3.3</code> <code>3.7.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.17.2</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.7.1</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;= 7.4.0</code> <code>8.1.1</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;= 4.1.0</code> <code>5.0.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;= 3.13.0</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;= 3.3.1</code> <code>3.5.0</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.12.25</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>&gt;= 0.0.286</code> <code>0.3.5</code> MIT <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>69.2.0</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;= 0.10.2</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>; python_full_version &lt;= \"3.11.0a6\"</code> <code>2.0.1</code> ? <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=3.10; python_version &lt; \"3.8\"</code> <code>4.11.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.2.1</code> MIT License <code>virtualenv</code> Virtual Python Environment builder <code>&gt;=20.10.0</code> <code>20.25.1</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>4.0.0</code> Apache-2.0"},{"location":"license/","title":"License","text":"<p>Apache Software License 2.0</p> <p>Copyright \u00a9 2024, Corey Rayburn Yung</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> cento<ul> <li> base</li> <li> loaders</li> <li> manuscript</li> <li> mixers</li> <li> notes</li> <li> parsers</li> <li> savers</li> <li> sections</li> <li> slides</li> <li> styles</li> <li> utilities</li> </ul> </li> </ul>"},{"location":"reference/cento/","title":"Index","text":"<p>Combines markdown files into publications and related materials</p>"},{"location":"reference/cento/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":"<p>Tools to configure and implement a <code>cento</code> project.</p>"},{"location":"reference/cento/base/#cento.base.Outline","title":"<code>Outline(contents=dict())</code>  <code>dataclass</code>","text":"<p>             Bases: <code>MutableMapping</code></p> <p>Stores configuration settings extracted from a configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>contents</code> <code>GenericDict</code> <p>configuration options. Defaults to an empty <code>dict</code>.</p> <code>dict()</code> <p>Attributes:</p> Name Type Description <code>defaults</code> <code>GenericDict</code> <p>default options that should be used when a user does not provide the corresponding options in their configuration settings, but are otherwise necessary for the project. Defaults to an empty <code>dict</code>.</p>"},{"location":"reference/cento/base/#cento.base.Outline.defaults","title":"<code>defaults: GenericDict = {}</code>  <code>class-attribute</code>","text":"<p>Properties</p>"},{"location":"reference/cento/base/#cento.base.Outline.options","title":"<code>options: GenericDict</code>  <code>property</code>","text":"<p>Returns project options of outline from <code>contents</code>.</p> <p>Returns:</p> Type Description <code>GenericDict</code> <p>The section in contents matching the project section name in the</p> <code>GenericDict</code> <p>global settings.</p>"},{"location":"reference/cento/base/#cento.base.Outline.structure","title":"<code>structure: GenericDict</code>  <code>property</code>","text":"<p>Returns structure of outline from <code>contents</code>.</p> <p>Returns:</p> Type Description <code>GenericDict</code> <p>The section in contents matching the outline section name in the</p> <code>GenericDict</code> <p>global settings.</p>"},{"location":"reference/cento/base/#cento.base.Outline.add","title":"<code>add(key, value)</code>","text":"<p>Adds <code>key</code> and <code>value</code> to <code>contents</code>.</p> <p>If <code>key</code> is already a key in <code>contents</code>, the contents associated with that key are updated. If <code>key</code> doesn't exist, a new key/value pair is added to <code>contents</code>.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Hashable</code> <p>name of key to store <code>value</code>.</p> required <code>value</code> <code>GenericDict</code> <p>values to be stored.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>if <code>key</code> isn't hashable.</p> Source code in <code>src/cento/base.py</code> <pre><code>def add(\n    self,\n    key: Hashable,\n    value: GenericDict) -&gt; None:\n    \"\"\"Adds `key` and `value` to `contents`.\n\n    If `key` is already a key in `contents`, the contents associated with\n    that key are updated. If `key` doesn't exist, a new key/value pair is\n    added to `contents`.\n\n    Args:\n        key: name of key to store `value`.\n        value: values to be stored.\n\n    Raises:\n        TypeError: if `key` isn't hashable.\n\n    \"\"\"\n    try:\n        self[key].update(value)\n    except KeyError:\n        try:\n            self[key] = value\n        except TypeError as error:\n            message = 'The key must be hashable'\n            raise TypeError(message) from error\n    return\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Outline.create","title":"<code>create(source, /, **kwargs)</code>  <code>classmethod</code>","text":"<p>Creates a settings <code>dict</code> from a file path to an <code>ini</code> file.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Path | str</code> <p>path to file with data to store in a settings <code>dict</code>.</p> required <code>kwargs</code> <code>Any</code> <p>additional parameters and arguments to pass to <code>configparser</code>.</p> <code>{}</code> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>if the <code>source</code> path does not correspond to a file.</p> <p>Returns:</p> Type Description <code>Outline</code> <p>An instance with contents from the <code>source</code> file.</p> Source code in <code>src/cento/base.py</code> <pre><code>@classmethod\ndef create(cls, source: pathlib.Path | str, /, **kwargs:  Any) -&gt; Outline:\n    \"\"\"Creates a settings `dict` from a file path to an `ini` file.\n\n    Args:\n        source: path to file with data to store in a settings `dict`.\n        kwargs: additional parameters and arguments to pass to\n            `configparser`.\n\n    Raises:\n        FileNotFoundError: if the `source` path does not correspond to a\n            file.\n\n    Returns:\n        An instance with contents from the `source` file.\n\n    \"\"\"\n    path = utilities._pathlibify(source)\n    try:\n        contents = configparser.ConfigParser(dict_type = dict, **kwargs)\n        contents.optionxform = lambda option: option\n        contents.read(path)\n    except (KeyError, FileNotFoundError) as error:\n        message = f'settings file {path} not found'\n        raise FileNotFoundError(message) from error\n    return cls(contents)\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Outline.delete","title":"<code>delete(item)</code>","text":"<p>Deletes <code>item</code> in <code>contents</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Hashable</code> <p>key in <code>contents</code> to delete the key/value pair.</p> required Source code in <code>src/cento/base.py</code> <pre><code>def delete(self, item: Hashable) -&gt; None:\n    \"\"\"Deletes `item` in `contents`.\n\n    Args:\n        item: key in `contents` to delete the key/value pair.\n\n    \"\"\"\n    del self.contents[item]\n    return\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Outline.items","title":"<code>items()</code>","text":"<p>Emulates python <code>dict</code> <code>items</code> method.</p> <p>Returns:</p> Type Description <code>tuple[tuple[Hashable, Any], ...]</code> <p>A <code>tuple</code> equivalent to <code>dict.items()</code>.</p> Source code in <code>src/cento/base.py</code> <pre><code>def items(self) -&gt; tuple[tuple[Hashable, Any], ...]:\n    \"\"\"Emulates python `dict` `items` method.\n\n    Returns:\n        A `tuple` equivalent to `dict.items()`.\n\n    \"\"\"\n    return tuple(zip(self.keys(), self.values(), strict = True))\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Outline.keys","title":"<code>keys()</code>","text":"<p>Emulates python <code>dict</code> <code>keys</code> method.</p> <p>Returns:</p> Type Description <code>tuple[Hashable, ...]</code> <p>A <code>tuple</code> equivalent to <code>dict.keys().</code></p> Source code in <code>src/cento/base.py</code> <pre><code>def keys(self) -&gt; tuple[Hashable, ...]:\n    \"\"\"Emulates python `dict` `keys` method.\n\n    Returns:\n        A `tuple` equivalent to `dict.keys().`\n\n    \"\"\"\n    return tuple(self.contents.keys())\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Outline.values","title":"<code>values()</code>","text":"<p>Emulates python <code>dict</code> <code>values</code> method.</p> <p>Returns:</p> Type Description <code>tuple[Any, ...]</code> <p>A <code>tuple</code> equivalent to <code>dict.values().</code></p> Source code in <code>src/cento/base.py</code> <pre><code>def values(self) -&gt; tuple[Any, ...]:\n    \"\"\"Emulates python `dict` `values` method.\n\n    Returns:\n        A `tuple` equivalent to `dict.values().`\n\n    \"\"\"\n    return tuple(self.contents.values())\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Project","title":"<code>Project()</code>  <code>dataclass</code>","text":"<p>Interface for a <code>cento</code> project.</p> <p>Args:</p>"},{"location":"reference/cento/base/#cento.base.Section","title":"<code>Section(name, divider)</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Subclasser</code></p> <p>Base class for all section rules.</p> <p>By subclassing <code>wonka.Subclasser</code>, this class gains a <code>create</code> method that automatically allows creation of any subclass through an implicit registry where all of the key names for creating a subclass are the snakecase name of the subclass. To use this, just call `Genre.create({snakecase name of the subclass}).</p>"},{"location":"reference/cento/base/#cento.base.Section.parse","title":"<code>parse(contents)</code>","text":"<p>Parses a source file into its component parts.</p> <p>Parameters:</p> Name Type Description Default <code>contents</code> <code>str</code> <p>the <code>str</code> contents of the source file.</p> required <p>Returns:</p> Type Description <code>GenericDict</code> <p>A <code>dict</code> with keys being the name of the type of text (metadata, text, slides, etc.) and values as the parsed text from the corresponding section in that raw file.</p> Source code in <code>src/cento/base.py</code> <pre><code>def parse(self, contents: str) -&gt; GenericDict:\n    \"\"\"Parses a source file into its component parts.\n\n    Args:\n        contents: the `str` contents of the source file.\n\n    Returns:\n        A `dict` with keys being the name of the type of text (metadata,\n            text, slides, etc.) and values as the parsed text from the\n            corresponding section in that raw file.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Sources","title":"<code>Sources(metadata=dict(), text=dict(), slides=dict(), notes=dict())</code>  <code>dataclass</code>","text":"<p>Stores combined data extracted from source files.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>GenericDict</code> <p><code>dict</code> of metadata in the source files. Keys are the short names (no extension or folder) of the files and the values are <code>Metadata</code> instances containing data from within those files.</p> <code>dict()</code> <code>text</code> <code>GenericDict</code> <p><code>dict</code> of the texts from the source files used to form the final manuscript. Keys are the names of the sections or files and values are the <code>str</code> text extracted from those files to form a manuscript.</p> <code>dict()</code> <code>slides</code> <code>GenericDict</code> <p><code>dict</code> of the slide data from the source files used to create a slide deck. Keys are the titles of the slides or names of the files and values are the content of the slides.</p> <code>dict()</code> <code>notes</code> <code>GenericDict</code> <p><code>dict</code> of the accompanying notes for the final manuscript. Keys are the names of the sections or files and values are the <code>str</code> text extracted from those files to form a manuscript.</p> <code>dict()</code>"},{"location":"reference/cento/base/#cento.base.Sources.create","title":"<code>create(paths)</code>  <code>classmethod</code>","text":"<p>Creates an instance by parsing data from source files.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>list[str | Path]</code> <p>a <code>list</code> or <code>glob</code> of source files.</p> required <p>Returns:</p> Type Description <code>Sources</code> <p>An instance of <code>Documents</code> created from the source files.</p> Source code in <code>src/cento/base.py</code> <pre><code>@classmethod\ndef create(cls, paths: list[str | pathlib.Path]) -&gt; Sources:\n    \"\"\"Creates an instance by parsing data from source files.\n\n    Args:\n        paths: a `list` or `glob` of source files.\n\n    Returns:\n        An instance of `Documents` created from the source files.\n\n    \"\"\"\n    documents = cls()\n    for source in paths:\n        loaded = cls.load(source)\n        parsed = cls.parse(loaded)\n        for key, value in parsed.items():\n            getattr(documents, key).update(key, value)\n    return documents\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Sources.load","title":"<code>load(path)</code>  <code>classmethod</code>","text":"<p>Loads the text from a single source file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>a path to a source file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>An instance of <code>Documents</code> created from the source files.</p> Source code in <code>src/cento/base.py</code> <pre><code>@classmethod\ndef load(cls, path: str | pathlib.Path) -&gt; str:\n    \"\"\"Loads the text from a single source file.\n\n    Args:\n        path: a path to a source file.\n\n    Returns:\n        An instance of `Documents` created from the source files.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Sources.parse","title":"<code>parse(contents)</code>  <code>classmethod</code>","text":"<p>Parses a source file into its component parts.</p> <p>Parameters:</p> Name Type Description Default <code>contents</code> <code>str</code> <p>the <code>str</code> contents of the source file.</p> required <p>Returns:</p> Type Description <code>GenericDict</code> <p>A <code>dict</code> with keys being the name of the type of text (metadata, text, slides, etc.) and values as the parsed text from the corresponding section in that raw file.</p> Source code in <code>src/cento/base.py</code> <pre><code>@classmethod\ndef parse(cls, contents: str) -&gt; GenericDict:\n    \"\"\"Parses a source file into its component parts.\n\n    Args:\n        contents: the `str` contents of the source file.\n\n    Returns:\n        A `dict` with keys being the name of the type of text (metadata,\n            text, slides, etc.) and values as the parsed text from the\n            corresponding section in that raw file.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cento/base/#cento.base.Style","title":"<code>Style()</code>  <code>dataclass</code>","text":"<p>Args:</p>"},{"location":"reference/cento/loaders/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> loaders","text":"<p>Tools to load markdown files.</p>"},{"location":"reference/cento/manuscript/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> manuscript","text":"<p>Tools to convert text to a manuscript.</p>"},{"location":"reference/cento/mixers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> mixers","text":"<p>Tools to combine markdown files.</p>"},{"location":"reference/cento/mixers/#cento.mixers.Remix","title":"<code>Remix</code>","text":"<p>Combines text from source files.</p>"},{"location":"reference/cento/notes/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> notes","text":"<p>Tools to convert text to a manuscript.</p>"},{"location":"reference/cento/parsers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> parsers","text":"<p>Tools to parse markdown files.</p>"},{"location":"reference/cento/parsers/#cento.parsers.parse_metadata","title":"<code>parse_metadata(section)</code>","text":"<p>Converts the <code>metadata</code> section of a file into a <code>Metadata</code> instance.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p><code>str</code> from the metadata section of a source file.</p> required <p>Returns:</p> Type Description <code>Metadata</code> <p>The metadata converted into a <code>Metadata</code> instance.</p> Source code in <code>src/cento/parsers.py</code> <pre><code>def parse_metadata(section: str) -&gt; Metadata:\n    \"\"\"Converts the `metadata` section of a file into a `Metadata` instance.\n\n    Args:\n        section: `str` from the metadata section of a source file.\n\n    Returns:\n        The metadata converted into a `Metadata` instance.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cento/parsers/#cento.parsers.parse_notes","title":"<code>parse_notes(section)</code>","text":"<p>Converts the <code>notes</code> section of a file from markdown to output format.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p><code>str</code> from the notes section of a source file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The notes converted to the output format.</p> Source code in <code>src/cento/parsers.py</code> <pre><code>def parse_notes(section: str) -&gt; str:\n    \"\"\"Converts the `notes` section of a file from markdown to output format.\n\n    Args:\n        section: `str` from the notes section of a source file.\n\n    Returns:\n        The notes converted to the output format.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cento/parsers/#cento.parsers.parse_slides","title":"<code>parse_slides(section)</code>","text":"<p>Converts the <code>slides</code> section of a file from markdown to output format.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p><code>str</code> from the slides section of a source file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The slides converted to the output format.</p> Source code in <code>src/cento/parsers.py</code> <pre><code>def parse_slides(section: str) -&gt; str:\n    \"\"\"Converts the `slides` section of a file from markdown to output format.\n\n    Args:\n        section: `str` from the slides section of a source file.\n\n    Returns:\n        The slides converted to the output format.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cento/parsers/#cento.parsers.parse_text","title":"<code>parse_text(section)</code>","text":"<p>Converts the <code>text</code> section of a file from markdown to output format.</p> <p>Parameters:</p> Name Type Description Default <code>section</code> <code>str</code> <p><code>str</code> from the text section of a source file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The text converted to the output format.</p> Source code in <code>src/cento/parsers.py</code> <pre><code>def parse_text(section: str) -&gt; str:\n    \"\"\"Converts the `text` section of a file from markdown to output format.\n\n    Args:\n        section: `str` from the text section of a source file.\n\n    Returns:\n        The text converted to the output format.\n\n    \"\"\"\n</code></pre>"},{"location":"reference/cento/savers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> savers","text":"<p>Tools to save markdown files.</p>"},{"location":"reference/cento/sections/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> sections","text":"<p>Subclasses of Section.</p>"},{"location":"reference/cento/sections/#cento.sections.Metadata","title":"<code>Metadata(name, divider, start=base.dividers['metadata'], visuals_in_notes=True)</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Section</code></p> <p>Stores the metadata section of an individual source file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>short name of the file from which the metadata was extracted.</p> required <code>visuals_in_notes</code> <code>bool</code> <p>whether to include any visuals in the text section of the file in the notes section as well. Defaults to <code>True</code>.</p> <code>True</code>"},{"location":"reference/cento/sections/#cento.sections.Notes","title":"<code>Notes(name, divider, start=base.dividers['notes'])</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Section</code></p> <p>Stores the notes section of an individual source file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>short name of the file from which the metadata was extracted.</p> required"},{"location":"reference/cento/sections/#cento.sections.Slides","title":"<code>Slides(name, divider, start=base.dividers['slides'])</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Section</code></p> <p>Stores the slides section of an individual source file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>short name of the file from which the metadata was extracted.</p> required"},{"location":"reference/cento/sections/#cento.sections.Text","title":"<code>Text(name, divider, start=base.dividers['text'])</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Section</code></p> <p>Stores the text section of an individual source file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>short name of the file from which the metadata was extracted.</p> required"},{"location":"reference/cento/slides/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> slides","text":"<p>Tools to convert text to slides.</p>"},{"location":"reference/cento/styles/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> styles","text":"<p>Built-in subclasses of Style.</p>"},{"location":"reference/cento/styles/#cento.styles.LawReview","title":"<code>LawReview()</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Style</code></p> <p>Style rules for a law review article.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>_type_</code> <p>description</p> required"},{"location":"reference/cento/styles/#cento.styles.Textbook","title":"<code>Textbook()</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Style</code></p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>_type_</code> <p>description</p> required"},{"location":"reference/cento/utilities/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utilities","text":"<p>Shared tools.</p> <p>Contents:</p> <p>To Do:</p>"},{"location":"reference/cento/utilities/#cento.utilities._iterify","title":"<code>_iterify(item)</code>","text":"<p>Returns <code>item</code> as an iterable, but does not iterate str types.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>item to turn into an iterable</p> required <p>Returns:</p> Type Description <code>Iterable</code> <p>Iterable of <code>item</code>. A <code>str</code> type will be stored as a single item in an Iterable wrapper.</p> Source code in <code>src/cento/utilities.py</code> <pre><code>def _iterify(item: Any) -&gt; Iterable:\n    \"\"\"Returns `item` as an iterable, but does not iterate str types.\n\n    Args:\n        item: item to turn into an iterable\n\n    Returns:\n        Iterable of `item`. A `str` type will be stored as a single item in an\n            Iterable wrapper.\n\n    \"\"\"\n    if item is None:\n        return iter(())\n    elif isinstance(item, str | bytes):\n        return iter([item])\n    else:\n        try:\n            return iter(item)\n        except TypeError:\n            return iter((item,))\n</code></pre>"},{"location":"reference/cento/utilities/#cento.utilities._pathlibify","title":"<code>_pathlibify(item)</code>","text":"<p>Converts string <code>path</code> to pathlib.Path object.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str | Path</code> <p>either a string of a path or a pathlib.Path object.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>pathlib.Path object.</p> Source code in <code>src/cento/utilities.py</code> <pre><code>def _pathlibify(item: str | pathlib.Path) -&gt; pathlib.Path:\n    \"\"\"Converts string `path` to pathlib.Path object.\n\n    Args:\n        item: either a string of a path or a pathlib.Path object.\n\n    Raises:\n        TypeError if `path` is neither a str or pathlib.Path type.\n\n    Returns:\n        pathlib.Path object.\n\n    \"\"\"\n    if isinstance(item, str):\n        return pathlib.Path(item)\n    elif isinstance(item, pathlib.Path):\n        return item\n    else:\n        raise TypeError('item must be str or pathlib.Path type')\n</code></pre>"},{"location":"reference/cento/utilities/#cento.utilities._typify","title":"<code>_typify(item)</code>","text":"<p>Converts stings to appropriate, supported datatypes.</p> <p>The method converts strings to list (if ', ' is present), int, float, or bool datatypes based upon the content of the string. If no alternative datatype is found, the item is returned in its original form.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>string to be converted to appropriate datatype.</p> required <p>Returns:</p> Type Description <code>list[Any] | int | float | bool | str</code> <p>Converted item.</p> Source code in <code>src/cento/utilities.py</code> <pre><code>def _typify(item: str) -&gt; list[Any] | int | float | bool | str:\n    \"\"\"Converts stings to appropriate, supported datatypes.\n\n    The method converts strings to list (if ', ' is present), int, float,\n    or bool datatypes based upon the content of the string. If no\n    alternative datatype is found, the item is returned in its original\n    form.\n\n    Args:\n        item: string to be converted to appropriate datatype.\n\n    Returns:\n        Converted item.\n\n    \"\"\"\n    if not isinstance(item, str):\n        return item\n    try:\n        return int(item)\n    except ValueError:\n        try:\n            return float(item)\n        except ValueError:\n            if item.lower() in {'true', 'yes'}:\n                return True\n            elif item.lower() in {'false', 'no'}:\n                return False\n            elif ', ' in item:\n                item = item.split(', ')\n                return [_typify(i) for i in item]\n            else:\n                return item\n</code></pre>"}]}